/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "CG-EIB Addressing"
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "0" // Invisible
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT 
STRING_INPUT Address$[11];      
STRING_INPUT EIB_Fb_In$[60];
STRING_INPUT Command_In$[36];
// BUFFER_INPUT 

// DIGITAL_OUTPUT           
STRING_OUTPUT EIB_Fb_Out$;
STRING_OUTPUT Command_Out$;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER marker1, marker2;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING HighGroup[2], MiddleGroup[2], UnderGroup_High[2], UnderGroup_Low[2];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE Address$
{          
	marker1 = 1;
	marker2 = find("/", Address$);
	makeString(HighGroup, "%s", chr(atoi(mid(Address$, marker1, marker2-marker1))));
	marker1 = marker2+1;
	marker2 = find("/", Address$, marker1);
	if (marker2)
	{
		makeString(MiddleGroup, "%s", chr(atoi(mid(Address$, marker1, marker2-marker1))));
		marker1 = marker2+1;
		marker2 = len(Address$) + 1;
		makeString(UnderGroup_High, "%s", chr((atoi(mid(Address$, marker1, marker2-marker1)) & 0xF0) >> 4));
		makeString(UnderGroup_Low, "%s", chr(atoi(mid(Address$, marker1, marker2-marker1)) & 0x0F));
	}
	else
	{
		marker2 = len(Address$) + 1;
		makeString(MiddleGroup, "%s", chr((atoi(mid(Address$, marker1, marker2-marker1)) & 0xF00) >> 8));
		makeString(UnderGroup_High, "%s", chr((atoi(mid(Address$, marker1, marker2-marker1)) & 0x0F0) >> 4));
		makeString(UnderGroup_Low, "%s", chr(atoi(mid(Address$, marker1, marker2-marker1)) & 0x00F));					
	}
	print("\n%02X%02X%02X%02X", byte(HighGroup, 1), byte(MiddleGroup, 1), byte(UnderGroup_High, 1), byte(UnderGroup_Low, 1));	
}   


CHANGE EIB_Fb_In$
{                  
	if (mid(EIB_Fb_In$, 2, 1) = HighGroup && mid(EIB_Fb_In$, 3, 1) = MiddleGroup && mid(EIB_Fb_In$, 4, 1) = UnderGroup_High && mid(EIB_Fb_In$, 5, 1) = UnderGroup_Low)
	{ 
		EIB_Fb_Out$ = EIB_Fb_In$;
	}
			
}


CHANGE Command_In$
{
	makeString(Command_Out$, "%s%s%s%s%s%s", left(Command_In$, 1), HighGroup, MiddleGroup, UnderGroup_High, UnderGroup_Low, right(Command_In$, len(Command_In$)-1)); 
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

